from typing import List, Tuple, Set, Union, Type
from pathlib import Path
from copy import deepcopy
from GameEngines.{{ GameName }} import Move
from GameEngines.{{ GameName }}.repr import _repr
from GameEngines.{{ GameName }}.SaveModule import {{ GameName }}Save
from GameEngines import BaseBoardState, AbsSaveModule
from GameEngines.cache_utils import cache_moves, ignore_cache
import numpy as np


class BoardState(BaseBoardState):

    _DEFAULT_SAVE_MOD = {{ GameName }}Save
    def __init__(self, *, save_module: Type[AbsSaveModule] = _DEFAULT_SAVE_MOD):
        super().__init__(save_module=save_module)

        self._board = None # todo

    def __eq__(self, other: 'BoardState') -> bool:
        return (
            # todo
        )

    @property
    def board(self) -> None:
        return # todo

    def __repr__(self):
        return _repr(self)

    def play(self, move: Move) -> 'BoardState':
        new_board = self.copy()
        # todo
        return new_board

    @cache_moves
    def get_legal_moves(self, *, cache=False) -> Set[Move]:
        ... # todo

    def winner(self) -> int:
        ... #todo

    def score(self) -> Tuple[int, int]:
        ... # todo